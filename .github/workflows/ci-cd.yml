name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Ensure only one CI/CD pipeline runs at a time
concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

# Required permissions for GitHub Actions
permissions:
  contents: read          # Allow reading repository contents
  issues: write           # Allow commenting on issues and PRs
  pull-requests: write    # Allow updating PR status
  statuses: write         # Allow creating commit status checks

# Performance optimizations:
# - Cache Playwright browsers (~100MB, saves 30-60s per run)
# - Cache node_modules (saves 10-20s per run)
# - Only install Chromium browser for CI (not all 5 browsers)
# - Use essential test suite (6 tests vs 260+ tests)

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Cache node modules
      uses: actions/cache@v4
      id: npm-cache
      with:
        path: node_modules
        key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          node-modules-${{ runner.os }}-
    
    - name: Install dependencies
      if: steps.npm-cache.outputs.cache-hit != 'true'
      run: npm ci
    
    - name: Get Playwright version
      id: playwright-version
      run: echo "version=$(npx playwright --version | cut -d' ' -f2)" >> $GITHUB_OUTPUT
    
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ steps.playwright-version.outputs.version }}-${{ runner.os }}
        restore-keys: |
          playwright-browsers-${{ runner.os }}
    
    - name: Install Playwright Browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps chromium
    
    - name: Install system dependencies for browsers (if cache hit)
      if: steps.playwright-cache.outputs.cache-hit == 'true'
      run: npx playwright install-deps chromium
    
    - name: Run Essential Playwright tests (faster)
      id: playwright-tests
      run: npm run test:ci
      continue-on-error: true
    
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report-${{ github.run_number }}
        path: playwright-report/
        retention-days: 30
    
    - name: Comment PR with Test Results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && !cancelled()
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Function to get test results
          function getTestResults() {
            try {
              const reportPath = path.join(process.cwd(), 'playwright-report');
              const resultsPath = path.join(reportPath, 'results.json');
              
              // Try to read results from Playwright JSON report
              if (fs.existsSync(resultsPath)) {
                const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                
                // Parse Playwright JSON format
                const stats = results.stats || {};
                const passed = stats.expected || 0;
                const failed = stats.unexpected || 0;
                const skipped = stats.skipped || 0;
                const total = passed + failed + skipped;
                
                return {
                  status: failed > 0 ? 'failed' : 'passed',
                  total,
                  passed,
                  failed,
                  skipped,
                  duration: results.duration || 0,
                  detailed: true
                };
              }
              
              // Fallback: check if report directory exists and estimate results  
              if (fs.existsSync(reportPath)) {
                const files = fs.readdirSync(reportPath);
                const hasFailures = files.some(file => file.includes('failed') || file.includes('error'));
                return {
                  status: hasFailures ? 'failed' : 'passed',
                  estimated: true
                };
              }
              
              return { status: 'unknown' };
            } catch (error) {
              console.log('Error reading test results:', error.message);
              return { status: 'unknown', error: error.message };
            }
          }
          
          const testResults = getTestResults();
          const runNumber = '${{ github.run_number }}';
          const runId = '${{ github.run_id }}';
          const repoUrl = `https://github.com/${{ github.repository }}`;
          const artifactUrl = `${repoUrl}/actions/runs/${runId}`;
          
          // Determine status icon and message
          let statusIcon, statusMessage, statusColor;
          if (testResults.status === 'passed' || (testResults.estimated && testResults.status !== 'failed')) {
            statusIcon = '‚úÖ';
            statusMessage = 'All tests passed';
            statusColor = 'üü¢';
          } else if (testResults.status === 'failed') {
            statusIcon = '‚ùå';
            statusMessage = 'Some tests failed';
            statusColor = 'üî¥';
          } else {
            statusIcon = '‚ö†Ô∏è';
            statusMessage = 'Test status unknown';
            statusColor = 'üü°';
          }
          
          const testSuite = 'Essential Tests (CI optimized)';
          const browsers = 'Chromium + Mobile Chrome';
          
          // Build test summary based on available data
          let testSummary = '';
          if (testResults.detailed) {
            const duration = testResults.duration ? Math.round(testResults.duration / 1000) : 0;
            testSummary = `
          üìä **Test Results:**
          - **Total:** ${testResults.total} tests
          - **Passed:** ${testResults.passed} ‚úÖ  
          - **Failed:** ${testResults.failed} ‚ùå
          ${testResults.skipped > 0 ? `- **Skipped:** ${testResults.skipped} ‚è≠Ô∏è\n` : ''}${duration > 0 ? `- **Duration:** ${duration}s ‚è±Ô∏è\n` : ''}`;
          } else if (testResults.estimated) {
            testSummary = '\n> *Results estimated from CI output - download artifact for details*';
          } else {
            testSummary = '\n> *Unable to parse detailed results - check Actions logs*';
          }
          
          const comment = `üé≠ **Playwright Test Results**
          
          ${statusColor} **Status:** ${statusIcon} ${statusMessage}
          ${testSummary}
          
          üìã **Configuration:**
          - **Suite:** ${testSuite}
          - **Browsers:** ${browsers}
          - **Run:** #${runNumber}
          
          üìä **Resources:**
          - [üìà HTML Test Report (Download Artifact)](${artifactUrl}) 
          - [üîç Full GitHub Actions Run](${artifactUrl})
          - [üìã Raw Logs & Traces](${artifactUrl})
          
          ---
          
          üí° **Need Help?**
          - **Failed tests?** Check the artifact for screenshots and traces
          - **Flaky tests?** Re-run the workflow or push a new commit  
          - **Questions?** Review the detailed HTML report in the artifact
          
          ---
          *ü§ñ Auto-generated by CV Terminal CI ‚Ä¢ Run ${runNumber}*`;
          
          // Find existing test results comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('üé≠ **Playwright Test Results**')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }
    
    - name: Set PR status check
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && !cancelled()
      with:
        script: |
          const testPassed = '${{ steps.playwright-tests.outcome }}' === 'success';
          const state = testPassed ? 'success' : 'failure';
          const description = testPassed 
            ? '‚úÖ All Playwright tests passed' 
            : '‚ùå Some Playwright tests failed';
            
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.payload.pull_request.head.sha,
            state: state,
            target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }}`,
            description: description,
            context: 'Playwright Tests / Essential Suite'
          });
    
    - name: Fail job if tests failed
      if: steps.playwright-tests.outcome == 'failure'
      run: |
        echo "‚ùå Playwright tests failed. Check the test results above and the uploaded artifacts for details."
        exit 1

  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: test
    # Only deploy on push to main (not on PRs) and after tests pass
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      id: npm-cache-deploy
      with:
        path: node_modules
        key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          node-modules-${{ runner.os }}-

    - name: Install dependencies
      if: steps.npm-cache-deploy.outputs.cache-hit != 'true'
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Deploy to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: cv-terminal
        directory: out
        wranglerVersion: '3'

  preview:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    needs: test
    # Only deploy preview on pull requests and after tests pass
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      id: npm-cache-preview
      with:
        path: node_modules
        key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          node-modules-${{ runner.os }}-

    - name: Install dependencies
      if: steps.npm-cache-preview.outputs.cache-hit != 'true'
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Deploy Preview to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      id: deploy-preview
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: cv-terminal
        directory: out
        wranglerVersion: '3'

    - name: Comment PR with Preview URL
      uses: actions/github-script@v7
      with:
        script: |
          const previewUrl = '${{ steps.deploy-preview.outputs.url }}';
          const comment = `üöÄ **Preview Deployment Ready!**
          
          ‚úÖ Your changes have been deployed to a preview environment:
          
          **üîó Preview URL:** ${previewUrl}
          
          üìù This preview will be updated automatically with new commits to this PR.
          
          ---
          *Generated by GitHub Actions*`;
          
          // Find existing preview comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('üöÄ **Preview Deployment Ready!**')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }