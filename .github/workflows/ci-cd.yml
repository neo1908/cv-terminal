name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Ensure only one CI/CD pipeline runs at a time
concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

# Performance optimizations:
# - Cache Playwright browsers (~100MB, saves 30-60s per run)
# - Cache node_modules (saves 10-20s per run)
# - Only install Chromium browser for CI (not all 5 browsers)
# - Use essential test suite (6 tests vs 260+ tests)

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Cache node modules
      uses: actions/cache@v4
      id: npm-cache
      with:
        path: node_modules
        key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          node-modules-${{ runner.os }}-
    
    - name: Install dependencies
      if: steps.npm-cache.outputs.cache-hit != 'true'
      run: npm ci
    
    - name: Get Playwright version
      id: playwright-version
      run: echo "version=$(npx playwright --version | cut -d' ' -f2)" >> $GITHUB_OUTPUT
    
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ steps.playwright-version.outputs.version }}-${{ runner.os }}
        restore-keys: |
          playwright-browsers-${{ runner.os }}
    
    - name: Install Playwright Browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps chromium
    
    - name: Install system dependencies for browsers (if cache hit)
      if: steps.playwright-cache.outputs.cache-hit == 'true'
      run: npx playwright install-deps chromium
    
    - name: Run Essential Playwright tests (faster)
      run: npm run test:ci
    
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: test
    # Only deploy on push to main (not on PRs) and after tests pass
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      id: npm-cache-deploy
      with:
        path: node_modules
        key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          node-modules-${{ runner.os }}-

    - name: Install dependencies
      if: steps.npm-cache-deploy.outputs.cache-hit != 'true'
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Deploy to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: cv-terminal
        directory: out
        wranglerVersion: '3'

  preview:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    needs: test
    # Only deploy preview on pull requests and after tests pass
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      id: npm-cache-preview
      with:
        path: node_modules
        key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          node-modules-${{ runner.os }}-

    - name: Install dependencies
      if: steps.npm-cache-preview.outputs.cache-hit != 'true'
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Deploy Preview to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      id: deploy-preview
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: cv-terminal
        directory: out
        wranglerVersion: '3'

    - name: Comment PR with Preview URL
      uses: actions/github-script@v7
      with:
        script: |
          const previewUrl = '${{ steps.deploy-preview.outputs.url }}';
          const comment = `🚀 **Preview Deployment Ready!**
          
          ✅ Your changes have been deployed to a preview environment:
          
          **🔗 Preview URL:** ${previewUrl}
          
          📝 This preview will be updated automatically with new commits to this PR.
          
          ---
          *Generated by GitHub Actions*`;
          
          // Find existing preview comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('🚀 **Preview Deployment Ready!**')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }